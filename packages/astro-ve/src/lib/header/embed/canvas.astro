---
export interface Props {
    message?: string;
    scene?: string;
}
const { message, scene } = Astro.props;

---


<astro-canvas data-message={message} data-scene={scene}>
    <div id="astro-canvas-container" {...Astro.props}>
    </div>
</astro-canvas>


<script is:inline type="module">

    import * as Phaser from 'https://cdn.jsdelivr.net/npm/phaser@3.80.1/+esm';
    window.Phaser = Phaser;

    import GridEngine from 'https://cdn.jsdelivr.net/npm/grid-engine@2.44.2/+esm';
    window.GridEngine = GridEngine;     // We had some issues with the capital and lowercase but have resolved it. window.gridEngine = GridEngine;

    
    // Function to reload Phaser and GridEngine libraries
    const reloadGameLibraries = () => {
        // Reload Phaser library
        import('https://cdn.jsdelivr.net/npm/phaser@3.80.1/+esm')
            .then(module => {
                // Update the global reference with the reloaded module
                window.Phaser = module;
                console.log('Phaser reloaded successfully.');
            })
            .catch(error => console.error('Error reloading Phaser:', error));
        
        // Reload GridEngine library
        import('https://cdn.jsdelivr.net/npm/grid-engine@2.44.2/+esm')
            .then(module => {
                // Update the global reference with the reloaded module
                window.GridEngine = module.default;
                console.log('GridEngine reloaded successfully.');
            })
            .catch(error => console.error('Error reloading GridEngine:', error));
    };

    /*

        document.addEventListener('astro:page-load', () => {

                reloadGameLibraries()

                if(!(AstroCanvas.prototype).game)
                {
                    
                    console.error('Unable to find game');
                    // AstroCanvas.prototype.initPhaser(scene)
                }

            });

        document.addEventListener('astro:before-swup', () => {
            const astroCanvasElement = document.querySelector('astro-canvas');
                
                if (astroCanvasElement) {
                        astroCanvasElement.shutdownGame();
                    }
                    else 
                    {
                        console.error('Unable to locate Canvas Element');
                    }
            
                });

        window.addEventListener('resize', () => {
                if (this.game) {
                    // Adjust this logic based on your game's specific needs
                    const width = window.innerWidth;
                    const height = window.innerHeight;
                    this.game.scale.resize(width, height);
                    // Additional adjustments might be needed for game's internal layout
                }
            });

          
    */

  

    class AstroCanvas extends HTMLElement {
        constructor() {
            super();
            // const scene = this.dataset.scene;
            // window.addEventListener('load', (event) => {
            // this.initPhaser(scene)
            // });

            // document.addEventListener('astro:after-swup', () => {
            // this.pauseGame();
            // });
            this.initEventListener();

            
   
        }

        initEventListener() {
            window.addEventListener('load', () => this.initPhaser());
            document.addEventListener('astro:after-swup', () => this.pauseGame());
            document.addEventListener('astro:before-swup', () => this.shutdownGame());
        }

        connectedCallback() {
            if (!this.game) {
                this.initPhaser();
            }
        }

        disconnectedCallback() {
            this.shutdownGame();
        }


        pauseGame() {
            if (this.game && this.game.scene) {
                this.game.scene.pauseAll(); // This pauses all scenes
                // Alternatively, if you want to pause a specific scene, use:
                // this.game.scene.pause('YourSceneKey');
                console.log('Pausing Game');
            } else 
            {
                console.error('Unable to pause game');
            }
        }

        shutdownGame() {
            if (this.game) {
                this.game.destroy(true);
                this.game = null;
                console.log('Game destroyed');
            }
        }


        async initPhaser() {
            const scene = this.dataset.scene;
            const _phaserContainer = document.getElementById('astro-canvas-container');

            // Error Check for Phaser Container
            if (!_phaserContainer) {
                console.error('Phaser container not found');
                return;
            }

            if (this.game) {
                this.shutdownGame(); // Ensure no previous game instance is running
            }


            if (Phaser && GridEngine) {

                // This is for Debugging.
                //console.log('Phaser Engine Found');
                //console.log(`${Phaser.VERSION}`);

                // Initialize a Phaser game instance
                //  Game Configuration
                const config = {
                    title: "TownEngine", // Title for the Game
                    render: {
                        antialias: false,
                    }, // Anti Alias
                    type: Phaser.AUTO,
                    parent: _phaserContainer,

                    scale: {

                        mode: Phaser.Scale.FIT,
                        autoCenter: Phaser.Scale.CENTER_BOTH,

                        min: {
                            width: 720,
                            height: 528,
                        },

                        max: {
                            width: 1024,
                            height: 800,
                        }

                    },
                                    
                    transparent: true,
                    //backgroundColor: '#c0987d', //#4488aa

                    plugins: {
                     scene: [
                         {
                         key: "gridEngine",
                         plugin: GridEngine,
                         mapping: "gridEngine",
                         },
                    ],


                    },
                    //  This physics engine may have to be removed.
                    physics: {
                        default: 'arcade',
                        arcade: {
                            gravity: { y: 0 } // No gravity
                        }
                    },
                    scene: {
                        preload: function() {
                            this.load.image('mainBg', 'https://utfs.io/f/2c17f660-7f39-4edf-b83e-122a71014d99-6gflls.webp'); // Ensure you have a correct path to your logo image
                            this.load.sceneFile('TownScene', `${scene}`);
                            this.load.image('scroll', '/assets/img/fishchip/scroll.webp');
                            this.load.audio('music', '/assets/img/fishchip/bg.ogg');
                        },
                        create: function() {
                            if (!this.sound.get('music')?.isPlaying) {
                              this.sound.add('music', { loop: true, volume: 0.1 }).play();
                            }
                            this.add.image(480, 480, 'mainBg').setScale(0.1);

                            this.mainMenuButtonImage = this.add.image(480, 480, 'scroll').setAlpha(0.9).setScale(0.7, 0.2).setInteractive({ useHandCursor: true });

                            this.mainMenuButtonText = this.add.text(480, 480, 'Start Game', {
                                fontFamily: 'Arial Black', fontSize: 50, color: '#ffffff', stroke: '#000000', strokeThickness: 6,
                            }).setOrigin(0.5).setInteractive({ useHandCursor: true });
                            this.mainMenuButtonText.on('pointerdown', () => {
                                this.scene.start('TownScene');
                            }, this);


                        }
                    },
                    // Input - prevent Wheel and touch capture
                    input: {
                        mouse: {
                            preventDefaultWheel: false
                        },
                        touch: {
                            capture: false
                        }
                    }

                };
                    
                // Initialize the game
                this.game =  new Phaser.Game(config);
            } else {
                console.log('Phaser not found');
            }
        }
        
    }

    if (!customElements.get('astro-canvas')) {     customElements.define('astro-canvas', AstroCanvas);  }




</script>
